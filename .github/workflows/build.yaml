name: build and release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
          cache: 'pipenv'
      - name: Install pipenv
        run: |
          pip install pipenv
          mkdir ./.venv
      - name: Install dependencies
        run: |
          pipenv install
          pipenv run pip install pyinstaller
          pipenv run pip install pip-licenses
        shell: bash
      - name: Generate dependency licenses
        run: |
          pipenv run pip-licenses > depend-licenses.txt
      - name: Build onefile and folder in parallel
        run: |
          ls

          $jobOnefile = Start-Job -ScriptBlock {
            Write-Host "Building onefile..."
            pipenv run pyinstaller --onefile main.py --name onadaily --add-data onadailyorigin.yaml:. -y
            Write-Host "Building onefile done."
          }
          $jobFolder = Start-Job -ScriptBlock {
            Write-Host "Building folder..."
            pipenv run pyinstaller main.py --name onadaily --add-data onadailyorigin.yaml:. -y
            Write-Host "Building folder done."
          }
          
          echo "Waiting for jobs to finish..."
          Wait-Job -Job $jobOnefile, $jobFolder | Out-Null

          Get-Job | ForEach-Object {
              Write-Host "--- Receiving output for Job ID: $($_.Id), Name: $($_.Name), State: $($_.State) ---"
              Receive-Job -Job $_
              Write-Host "--- End of output for Job ID: $($_.Id) ---"
          }

          echo "Jobs finished."
          Get-Job

          ls

          $failedJobs = Get-Job | Where-Object { $_.State -ne 'Completed' }

          if ($failedJobs) {
            Write-Error "One or more jobs failed."
            $failedJobs | ForEach-Object { Receive-Job $_ }
            exit 1
          }
        shell: powershell
      - name: Onefile Compress
        run: |
          Copy-Item .\depend-licenses.txt .\dist\depend-licenses.txt
          Copy-Item .\LICENSE .\dist\LICENSE.txt
          Copy-Item .\README.md .\dist\README.md

          Compress-Archive -Path .\dist\onadaily.exe, .\dist\depend-licenses.txt, .\dist\LICENSE.txt, .\dist\README.md -DestinationPath onadaily-windows-onefile.zip
          ls *.zip
        shell: powershell

      - name: Folder Compress
        run: |
          Copy-Item .\depend-licenses.txt .\dist\onadaily\depend-licenses.txt
          Copy-Item .\LICENSE .\dist\onadaily\LICENSE.txt
          Copy-Item .\README.md .\dist\onadaily\README.md

          Compress-Archive -Path .\dist\onadaily\* -DestinationPath onadaily-windows.zip
          ls *.zip
        shell: powershell
      - name: Release check
        uses: kaisugi/action-regex-match@v1.0.1
        id: regex
        with:
          text: ${{ github.ref }}
          regex: 'refs\/tags\/v\d+\.\d+\.\d+pre\d+'

      - name: Release pre-release
        uses: softprops/action-gh-release@v2
        if: ${{ steps.regex.outputs.match != '' }}
        with:
          body: "onadaily-windows-onefile.zip 은 하나로 압축시킨 파일입니다. 바이러스로 오진될 수 있습니다. 이 경우엔 onadaily-windows.zip을 사용하세요.\n이 버전은 베타 버전입니다. 오류가 발생할 수 있습니다."
          files: |
            onadaily-windows-onefile.zip
            onadaily-windows.zip
          prerelease: true
      
      - name: Release
        uses: softprops/action-gh-release@v1
        if: ${{ steps.regex.outputs.match == '' }}
        with:
          body: "onadaily-windows-onefile.zip 은 하나로 압축시킨 파일입니다. 바이러스로 오진될 수 있습니다. 이 경우엔 onadaily-windows.zip을 사용하세요."
          files: |
            onadaily-windows-onefile.zip
            onadaily-windows.zip
