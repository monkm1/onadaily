name: build and release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
          architecture: 'x64'
          cache: 'pipenv'
      - name: Install pipenv
        run: |
          pip install pipenv
      - name: Install dependencies
        run: |
          $pythonpath = (Get-Command python).Source
          Write-Host "Python path : $pythonpath"
          pipenv install --python $pythonpath
          pipenv run pip install pyinstaller
          pipenv run pip install pip-licenses
      - name: checkout bootloader
        uses: actions/checkout@v4
        with:
          repository: monkm1/pyinstaller_bootloader
          path: ./bootloaders
          ssh-key: ${{ secrets.BOOTLOADER_REPO_DEPLOY_KEY }}
      - name: Apply custom bootloader
        run: |
          $custom_bootloader_path = "./bootloaders"
          $sitepackagelib = Invoke-Expression "pipenv run python -c ""import sysconfig; print(sysconfig.get_paths()['purelib'])"""
          Join-Path $sitepackagelib "Pyinstaller\bootloader" | ls
          $pyinstaller_bootloader_dir = Join-Path $sitepackagelib "Pyinstaller\bootloader\windows-64bit-intel"

          if (Test-Path $pyinstaller_bootloader_dir) {
            Copy-Item -Path (Join-Path $custom_bootloader_path "*") -Destination $pyinstaller_bootloader_dir -Force
          } else {
           Write-Error "부트로더 없음 : $pyinstaller_bootloader_dir"
           exit 1
           }
      - name: Generate dependency licenses
        run: pipenv run pip-licenses > depend-licenses.txt
      - name: Build onefile
        run: |
          pipenv run pyinstaller --onefile main.py --name onadaily --add-data onadailyorigin.yaml:. -y --collect-data patchright
          cp depend-licenses.txt dist/depend-licenses.txt
          cp LICENSE dist/LICENSE.txt
          Compress-Archive .\dist\* onadaily-windows-onefile.zip
          ls
      - name: Build
        run: |
          pipenv run pyinstaller main.py --name onadaily --add-data onadailyorigin.yaml:. -y --collect-data patchright
          cp depend-licenses.txt dist/onadaily/depend-licenses.txt
          cp LICENSE dist/onadaily/LICENSE.txt
          Compress-Archive .\dist\onadaily\* onadaily-windows.zip
      - name: Release check
        uses: kaisugi/action-regex-match@v1.0.1
        id: regex
        with:
          text: ${{ github.ref }}
          regex: 'refs\/tags\/v\d+\.\d+\.\d+pre\d+'

      - name: Process tag name
        id: process_tag
        run: |
          $fulltagname = '${{ github.ref_name }}'
          $tagname = $fulltagname -replace '(?:pre|beta|rc|alpha|dev|b|a|snapshot)[0-9._-]*$', ''
          $tagnamewitoutdot = $tagname -replace '\.', ''
          echo version=$($tagnamewitoutdot) >> $env:GITHUB_OUTPUT

      - name: Release pre-release
        uses: softprops/action-gh-release@v2
        if: ${{ steps.regex.outputs.match != '' }}
        with:
          body: |
            onadaily-windows-onefile.zip 은 하나로 압축시킨 파일입니다. 바이러스로 오진될 수 있습니다. 이 경우엔 onadaily-windows.zip을 사용하세요.
            이 버전은 베타 버전입니다. 오류가 발생할 수 있습니다.
            [변경 사항](changelog.md#${{ steps.process_tag.outputs.version }})
          files: |
              onadaily-windows-onefile.zip
              onadaily-windows.zip
          prerelease: true
      
      - name: Release
        uses: softprops/action-gh-release@v2
        if: ${{ steps.regex.outputs.match == '' }}
        with:
          body: |
            onadaily-windows-onefile.zip 은 하나로 압축시킨 파일입니다. 바이러스로 오진될 수 있습니다. 이 경우엔 onadaily-windows.zip을 사용하세요.
            [변경 사항](changelog.md#${{ steps.process_tag.outputs.version }})
          files: |
            onadaily-windows-onefile.zip
            onadaily-windows.zip